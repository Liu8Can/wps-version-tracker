name: WPS Version Auto Update

on:
  # schedule:
    # - cron: '0 0 * * 1'  # 每周一 UTC 00:00 运行
  workflow_dispatch:      # 允许手动触发
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'versions/**'
      - 'downloads/**'

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于生成更新日志

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install chromium

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Run version crawler
        run: python wps_version_crawler.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        id: run_crawler
        
      - name: Retry on failure
        if: steps.run_crawler.outcome == 'failure'
        run: |
          echo "首次运行失败，等待 30 秒后重试..."
          sleep 30
          python wps_version_crawler.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for changes
        id: git-check
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        if: steps.git-check.outputs.changes == 'true'
        run: |
          # 获取上次提交的版本信息
          last_version=$(git log -1 --pretty=format:"%h" -- versions/*/*.yaml 2>/dev/null || echo "initial")
          
          # 生成更新日志
          echo "# 更新日志" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## $(date +'%Y-%m-%d')" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # 添加版本更新信息
          for platform in windows macos; do
            if [ -f "versions/$platform/$platform.yaml" ]; then
              version=$(grep "version:" versions/$platform/$platform.yaml | head -n 1 | cut -d'"' -f2)
              build=$(grep "build_number:" versions/$platform/$platform.yaml | head -n 1 | cut -d'"' -f2)
              date=$(grep "release_date:" versions/$platform/$platform.yaml | head -n 1 | cut -d'"' -f2)
              
              echo "### $platform" >> CHANGELOG.md
              echo "- 版本: $version" >> CHANGELOG.md
              if [ ! -z "$build" ]; then
                echo "- 构建号: $build" >> CHANGELOG.md
              fi
              if [ ! -z "$date" ]; then
                echo "- 发布日期: $date" >> CHANGELOG.md
              fi
              echo "" >> CHANGELOG.md
            fi
          done

      - name: Pull latest changes
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git fetch origin
          git pull origin main --rebase || git pull origin main --allow-unrelated-histories

      - name: Commit and push changes
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git add .
          git commit -m "chore: auto update $(date +'%Y-%m-%d')"
          git push origin main

      - name: Set release date
        if: steps.git-check.outputs.changes == 'true'
        id: date
        run: echo "release_date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.git-check.outputs.changes == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.date.outputs.release_date }}
          files: |
            downloads/**/*.exe
            downloads/**/*.zip
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
